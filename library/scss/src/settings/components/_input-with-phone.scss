@mixin component-input-with-phone($form-type: no-type, $form-theme: no-theme) {

	@include form-class($form-type, $form-theme, false) {

		.forminator-input-with-phone {
			@if ('material' == $form-theme) {
				position: unset;
			}

			.flag-container {
				@if ('material' == $form-theme) {
					flex: 0 0 auto;
					position: relative;
					padding: 0;
				}

				.selected-flag {
					width: auto;
					display: flex;
					align-items: center;
					margin: 0;
					@if ('material' != $form-theme) {
						padding: 0 map-get($input, padding);
					}
					@else {
						padding: map-get($input, padding) 0 #{map-get($input, padding) - map-get($border-width, material)};
						background-color: transparent !important;
					}

					.iti-flag {
						display: block;
						position: relative;
						top: auto;
						bottom: auto;
						margin: 0;
						padding: 0;

						+ .iti-arrow {
							margin-left: #{map-get($input, padding) / 2};
						}
					}

					.iti-arrow {
						display: block;
						position: relative;
						top: auto;
						right: auto;
						margin: 0;
					}

					&:hover,
					&:focus,
					&:active {
						outline: none;
						box-shadow: none;
					}

					@if ('material' == $form-theme) {

						&:first-child {
							margin-right: map-get($input, padding);
						}

						&:last-child {
							margin-left: map-get($input, padding);
						}
					}
				}

				&:hover,
				&:focus,
				&:active {
					outline: none;
					box-shadow: none;
				}
			}

			@if ('material' == $form-theme) {

				.forminator-input {
					padding-right: 0;
					padding-left: 0;
				}

				~ span {
					padding-left: #{$int-flag-size + map-get($input, padding)};
				}
			}
		}
	}
}